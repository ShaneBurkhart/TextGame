package com.donkka.entities;

import java.util.ArrayList;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Vector2;
import com.donkka.helpers.Dimensions;
import com.donkka.patches.RecentlyPlayedNinePatch;
import com.donkka.sprites.DoubleFloatingNinePatch;

public class RecentlyPlayed{
	
	private static final float MARGIN_X = 10;

	private ArrayList<RecentlyPlayedListItem> items;
	private DoubleFloatingNinePatch background;
	
	public RecentlyPlayed(){
		background = new DoubleFloatingNinePatch(MARGIN_X, 100, 400, RecentlyPlayedNinePatch.getInstance());
		items = new ArrayList<RecentlyPlayed.RecentlyPlayedListItem>();
	}
	
	public void render(SpriteBatch batch){
		background.render(batch);
		for(RecentlyPlayedListItem i: items){
			if(i != null){
				i.render(batch);
			}
		}
	}
	
	public void add(String word){
		items.add(new RecentlyPlayedListItem(word));
	}
	
	public class RecentlyPlayedListItem{
		
		private static final float MARGIN_X = 20;
		private static final float ANIM_VEL = 100;
		
		public String word;
		public Vector2 pos;
		ShapeRenderer shapes = new ShapeRenderer();
		
		public RecentlyPlayedListItem(String word){
			this.word = word;
			this.pos = new Vector2(Dimensions.getLeft() + RecentlyPlayed.MARGIN_X, 100);
		}
		
		public void render(SpriteBatch batch){
			batch.end();
			shapes.begin(ShapeType.Filled);
			shapes.rect(pos.x, pos.y, 200, 40);
			shapes.end();
			batch.begin();
		}
		
		public void update(float delta){
			
		}
	}
}
